# https://github.com/abarichello/godot-ci/blob/master/.github/workflows/godot-ci.yml
# https://github.com/D4M13N-D3V/godot_template/blob/main/.github/workflows/game_ci.yml

#!!! README !!!
#! 1. On the `pre-test` workflow, please replace the `uses:` key to reference
#!    your own copy of the workflow file. Should the `test.yml` workflow ever
#!    be updated your own local copy should not break (and as far as I'm aware
#!    of this can not be parameterized)

#! Questions and Answers
#
#? Q: I'm using Godot without C#, my builds are now failing with the following
#?    error:
#? >  mv: cannot stat 'root/.local/share/godot/templates/{version}.stable.mono':
#? >  No such file or directory
#* A: This issue here on the `godot-ci`'s GitHub repository[1] details the likely
#*    solution to your problem albeit instead of adding `.mono` to the respective
#*    `mv` commands you would instead need to remove the `.mono` suffixes.
#*
#*    [1]: https://github.com/abarichello/godot-ci/issues/87
#
#? Q: Why are my tests running an older version of Godot?
#* A: Unfortunately you must manually edit `test.yml`. It is unknown to why it
#*    fails when parameterized or when even using the OR operator, but I'd
#*    rather not spend too much time on so far a small detail like that.

name: Build and Release
on:
  workflow_dispatch:
    inputs:
      game_title:
        type: string
        description: Game title
      godot_version:
        type: string
        description: Godot Engine version.
        default: "4.5.1"
      uv_version:
        type: string
        description: uv package manager version.
        default: "0.9.5"

permissions:
  contents: write

jobs:
  pre-test:
    uses: gekkotadev/ggt/.github/workflows/test.yml@main
    with:
      godot_version: ${{ inputs.godot_version }}
      uv_version: ${{ inputs.uv_version }}

  build-windows-x86:
    name: Windows x86 Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:mono-4.5.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Move export templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono ~/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono
      - name: Create staging directory
        run: mkdir -v -p build/windows

      - name: Build for Windows x86
        run: godot -v --export-release --headless "Windows Desktop x86_64" --path . --output "build/windows/${{ inputs.game_title }}.x86_64"

      - name: Zip Windows x86 artifacts
        run: zip -r windows_x86.zip build/windows

      - name: Upload Windows x86 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_x86
          path: windows_x86.zip

  build-windows-arm:
    name: Windows ARM Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:mono-4.5.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Move export templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono ~/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono
      - name: Create staging directory
        run: mkdir -v -p build/windows

      - name: Build for Windows ARM
        run: godot -v --export-release --headless "Windows Desktop ARM" --path . --output "build/windows/${{ inputs.game_title }}.arm"

      - name: Zip Windows ARM artifacts
        run: zip -r windows_arm.zip build/windows

      - name: Upload Windows ARM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_arm
          path: windows_arm.zip

  build-linux-x86:
    name: Linux x86 Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:mono-4.5.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Move export templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono ~/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono
      - name: Create staging directory
        run: mkdir -v -p build/linux

      - name: Build for Linux x86
        run: godot -v --export-release --headless "Linux x86_64" --path . --output "build/linux/${{ inputs.game_title }}.x86_64"

      - name: Zip Linux x86 artifacts
        run: zip -r linux_x86.zip build/linux

      - name: Upload Linux x86 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_x86
          path: linux_x86.zip

  build-linux-pi:
    name: Linux Pi Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:mono-4.5.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Move export templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono ~/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono
      - name: Create staging directory
        run: mkdir -v -p build/linux

      - name: Build for Linux Pi
        run: godot -v --export-release --headless "Linux Pi" --path . --output "build/linux/${{ inputs.game_title }}.arm"

      - name: Zip Linux Pi artifacts
        run: zip -r linux_pi.zip build/linux

      - name: Upload Linux Pi artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_pi
          path: linux_pi.zip

  build-android:
    name: Android Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:mono-4.5.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Move export templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono ~/.local/share/godot/export_templates/${{ inputs.godot_version }}.stable.mono
      - name: Create staging directory
        run: mkdir -v -p build/android

      - name: Build for Android
        run: godot -v --export-release --headless "Android" --path . --output "build/android/${{ inputs.game_title }}.arm"

      - name: Zip Android artifacts
        run: zip -r android.zip build/android

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: android.zip

  release:
    needs: [
      pre-test,
      build-windows-x86,
      build-windows-arm,
      build-linux-x86,
      build-linux-pi,
      build-android
    ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%d-%m')"
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get branch name
        id: get_branch
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Download Linux x86 artifacts
        uses: actions/download-artifact@v5
        with:
          name: linux_x86

      - name: Download Linux Pi artifacts
        uses: actions/download-artifact@v5
        with:
          name: linux_pi

      - name: Download Windows x86 artifacts
        uses: actions/download-artifact@v5
        with:
          name: windows_x86

      - name: Download Windows ARM artifacts
        uses: actions/download-artifact@v5
        with:
          name: windows_arm

      - name: Download Android artifacts
        uses: actions/download-artifact@v5
        with:
          name: android

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}.${{ github.run_id }}
          release_name: Build ${{ steps.date.outputs.date }}.${{ github.run_id }}
          body: |
            Releases for build `${{ steps.date.outputs.date }}.${{ github.run_id }}``
          draft: false

      - name: Upload Linux x86 Release Asset
        id: upload-linux-x86-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux_x86.zip
          asset_name: ${{ inputs.game_title }}_linux_x86.zip
          asset_content_type: application/zip
      
      - name: Upload Linux Pi Release Asset
        id: upload-linux-pi-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux_pi.zip
          asset_name: ${{ inputs.game_title }}_linux_pi.zip
          asset_content_type: application/zip

      - name: Upload Windows x86 Release Asset
        id: upload-windows-x86-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows_x86.zip
          asset_name: ${{ inputs.game_title }}_windows_x86.zip
          asset_content_type: application/zip

      - name: Upload Windows ARM Release Asset
        id: upload-windows-arm-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows_arm.zip
          asset_name: ${{ inputs.game_title }}_windows_arm.zip
          asset_content_type: application/zip
      
      - name: Upload Android Release Asset
        id: upload-android-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows_arm.zip
          asset_name: ${{ inputs.game_title }}_android.zip
          asset_content_type: application/zip
